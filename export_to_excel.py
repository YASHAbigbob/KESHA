# export_to_excel.py - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° USERNAME
import os
import pandas as pd
from datetime import datetime, timedelta
from crud import get_user_accounts, get_account_transactions, get_account_balance, get_account, \
    get_account_reconciliations
from utils.logger import logger
import sqlite3
from core import get_db_connection


def ensure_exports_dir():
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    exports_dir = "exports"
    if not os.path.exists(exports_dir):
        os.makedirs(exports_dir)
    return exports_dir


def get_account_transactions_with_details(account_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å—á–µ—Ç–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, –í–ö–õ–Æ–ß–ê–Ø username"""
    conn = get_db_connection()
    try:
        query = """
        SELECT 
            t.transaction_id,
            t.amount,
            t.date,
            t.comment,
            t.is_archived,
            t.is_reverted,
            t.created_at,
            t.username,  -- –î–û–ë–ê–í–õ–ï–ù–û: username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            a.account_name,
            a.precision
        FROM transactions t
        LEFT JOIN accounts a ON t.account_id = a.account_id
        WHERE t.account_id = ?
        ORDER BY t.date
        """

        cursor = conn.execute(query, (account_id,))
        transactions = []

        for row in cursor.fetchall():
            transactions.append(dict(row))

        return transactions
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        return []
    finally:
        conn.close()


def calculate_correct_running_balance(transactions, reconciliations, precision):
    """–ü–†–ê–í–ò–õ–¨–ù–û —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–µ–≥—É—â–∏–π –±–∞–ª–∞–Ω—Å —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–æ–≤ –ò username"""
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
    all_events = []

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    for t in transactions:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å username –µ—Å–ª–∏ –µ—Å—Ç—å
        comment = t.get('comment', '') or ''
        username = t.get('username', '')
        if username:
            comment = f"{comment} (@{username})" if comment else f"@{username}"

        all_events.append({
            'type': 'transaction',
            'date': t['date'],
            'amount': float(t['amount']),
            'comment': comment,
            'is_archived': t.get('is_archived', 0),
            'is_reverted': t.get('is_reverted', 0),
            'transaction_id': t['transaction_id']
        })

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—Ä–∫–∏
    for recon in reconciliations:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å username –µ—Å–ª–∏ –µ—Å—Ç—å
        comment = '–°–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞'
        username = recon.get('username', '')
        if username:
            comment = f"{comment} (@{username})"

        all_events.append({
            'type': 'reconciliation',
            'date': recon['reconciliation_date'],
            'balance': float(recon['balance']),
            'comment': comment,
            'reconciliation_id': recon['reconciliation_id']
        })

    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    if not all_events:
        return []

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
    all_events.sort(key=lambda x: x['date'])

    # –ù–∞—Ö–æ–¥–∏–º –¥–∞—Ç—ã —Å–≤–µ—Ä–æ–∫ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
    recon_dates = [recon['reconciliation_date'] for recon in reconciliations]
    recon_dates.sort()

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–µ–≥—É—â–∏–π –±–∞–ª–∞–Ω—Å
    current_balance = 0.0
    result = []

    for event in all_events:
        if event['type'] == 'transaction':
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏
            if event.get('is_reverted', 0):
                status = "–û—Ç–º–µ–Ω–µ–Ω–æ"
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
                has_later_recon = any(
                    recon_date > event['date'] for recon_date in recon_dates
                )
                if event.get('is_archived', 0) or has_later_recon:
                    status = "–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ"
                else:
                    status = "–ê–∫—Ç–∏–≤–Ω–æ"

                # –¢–æ–ª—å–∫–æ –ù–ï –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–ª–∏—è—é—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å
                if not event.get('is_reverted', 0):
                    current_balance += event['amount']

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É —Å —É—á–µ—Ç–æ–º —Ç–æ—á–Ω–æ—Å—Ç–∏ —Å—á–µ—Ç–∞
            amount_format = f"{{:+.{precision}f}}"
            amount_display = amount_format.format(event['amount'])

            result.append({
                '–î–∞—Ç–∞': event['date'][:19],
                '–°—É–º–º–∞': amount_display,
                '–ë–∞–ª–∞–Ω—Å': f"{current_balance:.{precision}f}",
                '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π': event['comment'],
                '–°—Ç–∞—Ç—É—Å': status
            })

        else:  # reconciliation
            # –ü—Ä–∏ —Å–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            current_balance = event['balance']
            result.append({
                '–î–∞—Ç–∞': event['date'][:19],
                '–°—É–º–º–∞': f"{0:.{precision}f}",
                '–ë–∞–ª–∞–Ω—Å': f"{current_balance:.{precision}f}",
                '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π': event['comment'],
                '–°—Ç–∞—Ç—É—Å': "–°–≤–µ—Ä–∫–∞"
            })

    return result


def create_account_sheet(writer, account, transactions, reconciliations):
    """–°–æ–∑–¥–∞–µ—Ç –ª–∏—Å—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å—á–µ—Ç–∞ —Å —É—á–µ—Ç–æ–º —Ç–æ—á–Ω–æ—Å—Ç–∏ –ò username"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å —Å—á–µ—Ç–∞
        precision = account.get('precision', 2)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –±–µ–≥—É—â–∏–º –±–∞–ª–∞–Ω—Å–æ–º
        sheet_data = calculate_correct_running_balance(transactions, reconciliations, precision)

        if not sheet_data:
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –ª–∏—Å—Ç
            empty_df = pd.DataFrame([{
                '–î–∞—Ç–∞': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                '–°—É–º–º–∞': '0.00',
                '–ë–∞–ª–∞–Ω—Å': '0.00',
                '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π': '–ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è',
                '–°—Ç–∞—Ç—É—Å': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
            }])
            sheet_name = account['account_name'][:31]
            empty_df.to_excel(writer, sheet_name=sheet_name, index=False)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ª–∏—Å—Ç
            worksheet = writer.sheets[sheet_name]
            column_widths = {
                'A': 20, 'B': 15, 'C': 15, 'D': 40, 'E': 15  # –£–≤–µ–ª–∏—á–∏–ª–∏ —à–∏—Ä–∏–Ω—É –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å username
            }
            for col, width in column_widths.items():
                worksheet.column_dimensions[col].width = width
            return

        df = pd.DataFrame(sheet_data)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ª–∏—Å—Ç
        df.to_excel(writer, sheet_name=account['account_name'][:31], index=False)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ª–∏—Å—Ç
        worksheet = writer.sheets[account['account_name'][:31]]

        # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        column_widths = {
            'A': 20,  # –î–∞—Ç–∞
            'B': 15,  # –°—É–º–º–∞
            'C': 15,  # –ë–∞–ª–∞–Ω—Å
            'D': 40,  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (—É–≤–µ–ª–∏—á–∏–ª–∏ –¥–ª—è username)
            'E': 15  # –°—Ç–∞—Ç—É—Å
        }

        for col, width in column_widths.items():
            worksheet.column_dimensions[col].width = width

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–∏—Å—Ç–∞ –¥–ª—è —Å—á–µ—Ç–∞ {account['account_name']}: {e}")
        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–∏—Å—Ç —Å –æ—à–∏–±–∫–æ–π
        error_df = pd.DataFrame([{
            '–î–∞—Ç–∞': '–û—à–∏–±–∫–∞',
            '–°—É–º–º–∞': '–û—à–∏–±–∫–∞',
            '–ë–∞–ª–∞–Ω—Å': '–û—à–∏–±–∫–∞',
            '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π': f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—ã–ø–∏—Å–∫—É: {str(e)}',
            '–°—Ç–∞—Ç—É—Å': '–û—à–∏–±–∫–∞'
        }])
        error_df.to_excel(writer, sheet_name='–û—à–∏–±–∫–∞', index=False)


def create_excel_export(accounts_data, export_type, chat_id):
    """–°–æ–∑–¥–∞–µ—Ç Excel —Ñ–∞–π–ª —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –ª–∏—Å—Ç–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—á–µ—Ç–∞"""
    try:
        if not accounts_data:
            return False, None, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"

        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
        exports_dir = ensure_exports_dir()
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"–≤—ã–ø–∏—Å–∫–∞_{export_type}_{chat_id}_{timestamp}.xlsx"
        filepath = os.path.join(exports_dir, filename)

        # –°–æ–∑–¥–∞–µ–º Excel writer
        with pd.ExcelWriter(filepath, engine='openpyxl') as writer:
            for account_data in accounts_data:
                account = account_data['account']
                transactions = account_data['transactions']
                reconciliations = account_data['reconciliations']

                create_account_sheet(writer, account, transactions, reconciliations)

        logger.info(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∞: {filepath}")
        return True, filepath, f"üìä –í—ã–ø–∏—Å–∫–∞ ({export_type}) —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞"

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞: {e}")
        return False, None, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}"


def get_accounts_export_data(chat_id, user_id, include_archived=True):
    """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ –≤—Å–µ–º —Å—á–µ—Ç–∞–º"""
    try:
        accounts = get_user_accounts(user_id, chat_id)
        accounts_data = []

        for account in accounts:
            # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å—á–µ—Ç–∞
            transactions = get_account_transactions_with_details(account['account_id'])

            # –ï—Å–ª–∏ –Ω–µ –≤–∫–ª—é—á–∞–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–µ, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∏—Ö
            if not include_archived:
                transactions = [t for t in transactions if not t.get('is_archived', 0)]

            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—Ä–∫–∏ —Å—á–µ—Ç–∞
            reconciliations = get_account_reconciliations(account['account_id'])

            accounts_data.append({
                'account': account,
                'transactions': transactions,
                'reconciliations': reconciliations
            })

        return accounts_data

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        return []


def handle_export_command(chat_id, user_id, export_type="full"):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    try:
        logger.info(f"–≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è chat_id: {chat_id}, user_id: {user_id}, —Ç–∏–ø: {export_type}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤–∫–ª—é—á–∞—Ç—å –ª–∏ –∞—Ä—Ö–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        include_archived = (export_type == "full")

        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º —Å—á–µ—Ç–∞–º
        accounts_data = get_accounts_export_data(chat_id, user_id, include_archived)

        if not accounts_data:
            return False, None, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"

        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
        return create_excel_export(accounts_data, export_type, chat_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_export_command: {e}")
        return False, None, f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}"


def cleanup_old_exports(hours=24):
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    try:
        exports_dir = ensure_exports_dir()
        now = datetime.now()
        deleted_count = 0

        for filename in os.listdir(exports_dir):
            if filename.endswith('.xlsx'):
                filepath = os.path.join(exports_dir, filename)
                file_time = datetime.fromtimestamp(os.path.getctime(filepath))

                if now - file_time > timedelta(hours=hours):
                    os.remove(filepath)
                    deleted_count += 1
                    logger.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∞: {filename}")

        if deleted_count > 0:
            logger.info(f"–û—á–∏—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞: {deleted_count}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")


# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏
    ensure_exports_dir()
    print("‚úÖ –ú–æ–¥—É–ª—å —ç–∫—Å–ø–æ—Ä—Ç–∞ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")