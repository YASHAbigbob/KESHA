# callbacks.py - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, CallbackQueryHandler
from telegram.error import TimedOut, NetworkError
from utils.logger import logger
from crud import revert_transaction, get_transaction, get_account, get_account_transactions, get_account_balance
from export_to_excel import handle_export_command, cleanup_old_exports
import asyncio
import os


async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    try:
        await query.answer()
    except (TimedOut, NetworkError) as e:
        logger.warning(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ answer callback: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ answer callback: {e}")

    user_id = query.from_user.id
    data = query.data
    chat_id = query.message.chat_id

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {data}")

    if data.startswith("cancel_"):
        transaction_id = int(data.split("_")[1])
        await handle_transaction_cancel(query, transaction_id, user_id)
    elif data.startswith("export_"):
        await handle_export_callback(query, data, user_id, chat_id, context)
    elif data.startswith("reconcile_"):
        await handle_reconciliation_callback(update, context)
    else:
        try:
            await query.edit_message_text("[–û–®–ò–ë–ö–ê] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


async def handle_export_callback(query, data: str, user_id: int, chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel"""
    try:
        await query.edit_message_text("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤—ã–ø–∏—Å–∫—É –≤ Excel...")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞
        if data == "export_all_accounts":
            export_type = "full"
        elif data == "export_current_accounts":
            export_type = "current"
        elif data.startswith("export_all_"):
            export_type = "full"
        elif data.startswith("export_current_"):
            export_type = "current"
        else:
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —ç–∫—Å–ø–æ—Ä—Ç–∞
        success, file_path, message = handle_export_command(chat_id, user_id, export_type)

        if success and file_path and os.path.exists(file_path):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            with open(file_path, 'rb') as file:
                await context.bot.send_document(
                    chat_id=chat_id,
                    document=file,
                    caption=message,
                    filename=os.path.basename(file_path)
                )
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.remove(file_path)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {file_path}: {e}")

            await query.delete_message()
        else:
            await query.edit_message_text(f"‚ùå {message}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ Excel: {e}")
        try:
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–∏—Å–∫–∏.")
        except:
            pass


async def handle_transaction_cancel(query, transaction_id: int, user_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –ü–†–ê–í–ò–õ–¨–ù–û–ô –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = get_transaction(transaction_id)
        if not transaction:
            await safe_edit_message(query, "‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if transaction.get('created_by') is not None and transaction['created_by'] != user_id:
            await safe_edit_message(query, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–∫–∞—Ç–∞ —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ª–∏ —É–∂–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
        if transaction.get('is_reverted'):
            await safe_edit_message(query, "‚ùå –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è —É–∂–µ –æ—Ç–∫–∞—á–µ–Ω–∞")
            return

        # –û—Ç–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (–æ—Ç–∫–∞—Ç)
        revert_transaction(transaction_id, user_id, "–û—Ç–∫–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

        # –ü–æ–ª—É—á–∞–µ–º —Å—á—ë—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        account = get_account(transaction['account_id'])
        if not account:
            await safe_edit_message(query, "‚ùå –°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—á—ë—Ç–∞ –±–∞–ª–∞–Ω—Å–∞
        balance = get_account_balance(account['account_id'])
        precision = account.get('precision', 2)
        balance_str = f"{balance:.{precision}f}"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        original_text = query.message.text
        lines = original_text.split('\n')
        if lines and lines[0].startswith("‚ùå –û–¢–ö–ê–¢–ê–ù–û"):
            lines = lines[1:]
            original_text = '\n'.join(lines).strip()

        new_text = f"‚ùå –û–¢–ö–ê–¢–ê–ù–û\n{original_text}\nüí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {balance_str} {account['account_name']}"

        await safe_edit_message(query, new_text, reply_markup=None)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–∞—Ç–∏–ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é {transaction_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {transaction_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: {e}")
        await safe_edit_message(query, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.")


async def handle_reconciliation_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –¥–ª—è —Å–≤–µ—Ä–∫–∏"""
    from handlers.reconciliation import handle_reconciliation_callback as reconcile_handler
    try:
        await reconcile_handler(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback —Å–≤–µ—Ä–∫–∏: {e}")
        try:
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–≤–µ—Ä–∫–∏")
        except:
            pass


async def safe_edit_message(query, text, reply_markup=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        await query.edit_message_text(text, reply_markup=reply_markup)
    except (TimedOut, NetworkError) as e:
        logger.warning(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        try:
            await query.message.reply_text(text)
        except Exception as e2:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e2}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        try:
            await query.message.reply_text(text)
        except Exception as e2:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e2}")


def get_callback_handler():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤"""
    return CallbackQueryHandler(handle_callback)