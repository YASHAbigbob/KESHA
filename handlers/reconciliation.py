# reconciliation.py - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° USERNAME
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes, CallbackQueryHandler
from utils.logger import logger
from crud import (
    get_user_accounts, get_account_transactions, create_reconciliation,
    archive_all_transactions, get_last_reconciliation, get_account_balance, ensure_chat_exists
)
from datetime import datetime


def get_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = [
        [KeyboardButton("/help"), KeyboardButton("/—Å—á–µ—Ç–∞")],
        [KeyboardButton("/—Å–≤–µ—Ä—å"), KeyboardButton("/–¥–∞–π")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def reconcile_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å–≤–µ—Ä–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π username"""
    user = update.effective_user
    user_id = user.id
    username = user.username or user.full_name  # –ü–æ–ª—É—á–∞–µ–º username
    chat_id = update.effective_chat.id
    text = update.message.text

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}) –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–µ—Ä–∫—É: {text}")

    try:
        accounts = get_user_accounts(user_id, chat_id)

        if not accounts:
            await update.message.reply_text(
                "üíº –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—á–µ—Ç–æ–≤ –¥–ª—è —Å–≤–µ—Ä–∫–∏.\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —Å—á–µ—Ç –∫–æ–º–∞–Ω–¥–æ–π `/–¥–æ–±–∞–≤—å —Ä—É–±`",
                reply_markup=get_main_keyboard()
            )
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
        account_name = extract_account_name(text)

        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—á–µ—Ç
        if account_name:
            target_account = None
            for account in accounts:
                # –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–û–ò–°–ö - –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏
                account_name_normalized = account['account_name'].lower().strip().replace(' ', '')
                specific_name_normalized = account_name.lower().strip().replace(' ', '')

                if account_name_normalized == specific_name_normalized:
                    target_account = account
                    break

            if target_account:
                await perform_reconciliation(update, target_account, chat_id, username)
                return
            else:
                await update.message.reply_text(
                    f"‚ùå –°—á–µ—Ç '{account_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=get_main_keyboard()
                )
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞

        # –ï—Å–ª–∏ —Å—á–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å—á–µ—Ç–∞
        await show_account_selection(update, accounts, chat_id, username)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã —Å–≤–µ—Ä–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({username}): {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–≤–µ—Ä–∫–∏.",
            reply_markup=get_main_keyboard()
        )


def extract_account_name(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—ã"""
    text_lower = text.lower().strip()

    # –î–ª—è –∫–æ–º–∞–Ω–¥—ã /—Å–≤–µ—Ä—å
    if text_lower.startswith('/—Å–≤–µ—Ä—å'):
        account_part = text[6:].strip()
        return account_part if account_part else None

    # –î–ª—è —Å—Ç–∞—Ä—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
    elif text_lower.startswith('–∫–µ—à–∞, —Å–≤–µ—Ä–µ–Ω–æ'):
        account_part = text[13:].strip()
        return account_part if account_part else None
    elif text_lower.startswith('—Å–≤–µ—Ä–µ–Ω–æ'):
        account_part = text[7:].strip()
        return account_part if account_part else None

    return None


async def show_account_selection(update, accounts, chat_id, username):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—á–µ—Ç–∞ –¥–ª—è —Å–≤–µ—Ä–∫–∏"""
    keyboard_buttons = []
    for account in accounts:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—á–µ—Ç–∞ –±–∞–ª–∞–Ω—Å–∞
        balance = get_account_balance(account['account_id'])

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—Ä–∫—É
        last_recon = get_last_reconciliation(account['account_id'])
        balance_info = f": {balance:.2f}"
        if last_recon:
            balance_info += f" (—Å –ø—Ä–æ—à–ª–æ–π —Å–≤–µ—Ä–∫–∏: {last_recon['balance']:.2f})"
        else:
            balance_info += " (–ø–µ—Ä–≤–∞—è —Å–≤–µ—Ä–∫–∞)"

        button_text = f"{account['account_name']}{balance_info}"
        keyboard_buttons.append([
            InlineKeyboardButton(button_text, callback_data=f"reconcile_{account['account_id']}")
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤
    keyboard_buttons.append([
        InlineKeyboardButton("üîÑ –°–≤–µ—Ä–Ω—É—Ç—å –í–°–ï —Å—á–µ—Ç–∞", callback_data="reconcile_all")
    ])

    reply_markup = InlineKeyboardMarkup(keyboard_buttons)

    await update.message.reply_text(
        "üìä **–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç –¥–ª—è —Å–≤–µ—Ä–∫–∏:**\n\n"
        "–°–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–æ—á–∫—É –∫–æ–Ω—Ç—Ä–æ–ª—è –±–∞–ª–∞–Ω—Å–∞.\n"
        "–ü–æ—Å–ª–µ —Å–≤–µ—Ä–∫–∏ –∏—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞—á–Ω–µ—Ç—Å—è –∑–∞–Ω–æ–≤–æ.",
        reply_markup=reply_markup
    )


async def perform_reconciliation(update, account, chat_id, username, all_accounts=False):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–≤–µ—Ä–∫–∏ –¥–ª—è —Å—á–µ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π username"""
    try:
        if all_accounts:
            # –°–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤
            user_id = update.effective_user.id
            accounts = get_user_accounts(user_id, chat_id)
            results = []

            for acc in accounts:
                result = reconcile_single_account(acc, chat_id, user_id, username)
                results.append(result)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            success_count = sum(1 for r in results if r['success'])
            total_archived = sum(r['archived_count'] for r in results if r['success'])

            response = f"üîÑ **–°–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n"
            response += f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}/{len(accounts)} —Å—á–µ—Ç–æ–≤\n"
            response += f"üìã –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {total_archived} –æ–ø–µ—Ä–∞—Ü–∏–π\n"
            response += f"üë§ –í—ã–ø–æ–ª–Ω–∏–ª: @{username}\n\n" if username else f"üë§ –í—ã–ø–æ–ª–Ω–∏–ª: {username}\n\n"

            for result in results:
                status = "‚úÖ" if result['success'] else "‚ùå"
                response += f"{status} {result['account_name']}: {result['message']}\n"

            if update.callback_query:
                await update.callback_query.edit_message_text(response)
            else:
                await update.message.reply_text(response, reply_markup=get_main_keyboard())

        else:
            # –°–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ —Å—á–µ—Ç–∞
            result = reconcile_single_account(account, chat_id, update.effective_user.id, username)

            response = f"üìä **–°–≤–µ—Ä–∫–∞ —Å—á–µ—Ç–∞ '{account['account_name']}'**\n\n"
            if result['success']:
                response += f"‚úÖ {result['message']}\n"
                response += f"üìã –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {result['archived_count']}\n"
                response += f"üí∞ –ë–∞–ª–∞–Ω—Å –Ω–∞ –º–æ–º–µ–Ω—Ç —Å–≤–µ—Ä–∫–∏: {result['balance']:.2f}\n"
                response += f"üë§ –í—ã–ø–æ–ª–Ω–∏–ª: @{username}\n" if username else f"üë§ –í—ã–ø–æ–ª–Ω–∏–ª: {username}\n"

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                date_str = result['date']
                if isinstance(date_str, str):
                    date_str = date_str[:16]
                else:
                    date_str = date_str.strftime('%d.%m.%Y %H:%M')

                response += f"üìÖ –î–∞—Ç–∞ —Å–≤–µ—Ä–∫–∏: {date_str}"
            else:
                response += f"‚ùå {result['message']}"

            if update.callback_query:
                await update.callback_query.edit_message_text(response)
            else:
                await update.message.reply_text(response, reply_markup=get_main_keyboard())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–≤–µ—Ä–∫–∏: {e}")
        error_msg = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–≤–µ—Ä–∫–∏."
        if update.callback_query:
            await update.callback_query.edit_message_text(error_msg)
        else:
            await update.message.reply_text(error_msg, reply_markup=get_main_keyboard())


def reconcile_single_account(account, chat_id, user_id=None, username=None):
    """–°–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ —Å—á–µ—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º username"""
    try:
        balance_before = get_account_balance(account['account_id'])

        if balance_before == 0 and not get_account_transactions(account['account_id']):
            return {
                'success': False,
                'account_name': account['account_name'],
                'message': "–ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —Å–≤–µ—Ä–∫–∏",
                'archived_count': 0,
                'balance': balance_before,
                'date': datetime.now()
            }

        archived_count = archive_all_transactions(account['account_id'])

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Å–≤–µ—Ä–∫–µ –° USERNAME
        recon_date = datetime.now()
        create_reconciliation(
            account['account_id'],
            chat_id,
            balance_before,
            recon_date,
            user_id,
            username  # –ü–µ—Ä–µ–¥–∞–µ–º username
        )

        logger.info(f"–°–≤–µ—Ä–∫–∞ —Å—á–µ—Ç–∞ {account['account_name']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {username}: –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {archived_count} –æ–ø–µ—Ä–∞—Ü–∏–π, –±–∞–ª–∞–Ω—Å {balance_before}")

        return {
            'success': True,
            'account_name': account['account_name'],
            'message': "–°–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
            'archived_count': archived_count,
            'balance': balance_before,
            'date': recon_date
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤–µ—Ä–∫–µ —Å—á–µ—Ç–∞ {account['account_id']}: {e}")
        return {
            'success': False,
            'account_name': account['account_name'],
            'message': f"–û—à–∏–±–∫–∞: {str(e)}",
            'archived_count': 0,
            'balance': 0,
            'date': datetime.now()
        }


async def handle_reconciliation_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –¥–ª—è —Å–≤–µ—Ä–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π username"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    username = query.from_user.username or query.from_user.full_name
    chat_id = update.effective_chat.id
    data = query.data

    if data == "reconcile_all":
        # –°–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤
        await perform_reconciliation(update, None, chat_id, username, all_accounts=True)

    elif data.startswith("reconcile_"):
        # –°–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—á–µ—Ç–∞
        account_id = int(data.split("_")[1])
        accounts = get_user_accounts(user_id, chat_id)
        account = next((acc for acc in accounts if acc['account_id'] == account_id), None)

        if account:
            await perform_reconciliation(update, account, chat_id, username)
        else:
            await query.edit_message_text("‚ùå –°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")


def get_reconciliation_handlers():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–≤–µ—Ä–∫–∏"""
    return [
        CallbackQueryHandler(handle_reconciliation_callback, pattern="^reconcile_")
    ]