# operations.py - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° USERNAME
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes
from telegram.error import TimedOut, NetworkError
from utils.logger import logger
from crud import get_user_accounts, create_transaction, get_account_transactions, get_account_balance, ensure_chat_exists
from calc import def_calc
from datetime import datetime
import asyncio


def get_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = [
        [KeyboardButton("/help"), KeyboardButton("/—Å—á–µ—Ç–∞")],
        [KeyboardButton("/—Å–≤–µ—Ä—å"), KeyboardButton("/–¥–∞–π")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


async def handle_operation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π username"""
    user = update.effective_user
    user_id = user.id
    username = user.username or user.full_name  # –ü–æ–ª—É—á–∞–µ–º username
    chat_id = update.effective_chat.id
    chat_type = update.effective_chat.type

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —á–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    ensure_chat_exists(chat_id, chat_type, update.effective_chat.title)

    if not update.message.text:
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã (—É–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π /)
    command_text = update.message.text[1:].strip()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞
        accounts = get_user_accounts(user_id, chat_id)
        if not accounts:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å—á–µ—Ç–æ–≤, —ç—Ç–æ –Ω–µ –æ–ø–µ—Ä–∞—Ü–∏—è
            return

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç–∞ –ø–æ –¥–ª–∏–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏—è (–æ—Ç –¥–ª–∏–Ω–Ω–æ–≥–æ –∫ –∫–æ—Ä–æ—Ç–∫–æ–º—É)
        accounts_sorted = sorted(accounts, key=lambda x: len(x['account_name']), reverse=True)

        target_account = None
        expression = ""
        comment = ""

        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—á–µ—Ç
        for account in accounts_sorted:
            account_name_lower = account['account_name'].lower()
            command_text_lower = command_text.lower()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏—è —Å—á–µ—Ç–∞
            if command_text_lower.startswith(account_name_lower + ' '):
                target_account = account
                remaining_text = command_text[len(account['account_name']):].strip()
                break

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –ø–µ—Ä–≤–æ–º—É —Å–ª–æ–≤—É
        if not target_account:
            first_word = command_text.split()[0].lower() if command_text.split() else ""
            for account in accounts:
                account_first_word = account['account_name'].split()[0].lower() if account['account_name'].split() else ""
                if account_first_word == first_word:
                    target_account = account
                    remaining_text = ' '.join(command_text.split()[1:])
                    break

        if not target_account:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ–ø–µ—Ä–∞—Ü–∏—è, –∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            return

        # –†–∞–∑–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç –Ω–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        parts = remaining_text.split(maxsplit=1)
        if len(parts) >= 1:
            expression = parts[0].strip()
            if len(parts) > 1:
                comment = parts[1].strip()

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}) –¥–æ–±–∞–≤–ª—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é: {target_account['account_name']} {expression} {comment}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
        if not expression:
            await update.message.reply_text(
                f"‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–∏. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                f"`/{target_account['account_name']} 100+50*2 –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π`\n"
                f"üí° –î–ª—è –¥–µ–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–Ω–∞–∫ `:`",
                reply_markup=get_main_keyboard()
            )
            return

        # –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—É —Å –ø–æ–º–æ—â—å—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ö–∞—Ç–∏ —Å —É—á–µ—Ç–æ–º —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç–∏ —Å—á–µ—Ç–∞
        logger.info(f"–í—ã—á–∏—Å–ª—è–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: {expression} —Å —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å—é {target_account['precision']}")
        result = def_calc(expression, target_account['precision'])
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {result}")

        if "–û—à–∏–±–∫–∞" in result:
            await update.message.reply_text(
                f"‚ùå {result}",
                reply_markup=get_main_keyboard()
            )
            return

        try:
            amount = float(result)
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ {result} –≤ float: {e}")
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–∏.",
                reply_markup=get_main_keyboard()
            )
            return

        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –° USERNAME
        transaction_id = create_transaction(
            target_account['account_id'],
            chat_id,
            amount,
            datetime.now(),
            comment,
            user_id,
            username  # –ü–µ—Ä–µ–¥–∞–µ–º username
        )

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—á–µ—Ç–∞ –±–∞–ª–∞–Ω—Å–∞
        balance = get_account_balance(target_account['account_id'])

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}) –¥–æ–±–∞–≤–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é: {target_account['account_name']} {amount}")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç–∏
        amount_str = f"+{amount:.{target_account['precision']}f}" if amount >= 0 else f"{amount:.{target_account['precision']}f}"
        balance_str = f"{balance:.{target_account['precision']}f}"

        response = f"‚úÖ –ó–∞–ø–æ–º–Ω–∏–ª. {amount_str}\n"
        response += f"–ë–∞–ª–∞–Ω—Å: {balance_str} {target_account['account_name']}"

        if comment:
            response += f"\nüí¨ {comment}"

        # –í –≥—Ä—É–ø–ø–∞—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ç–æ –¥–æ–±–∞–≤–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é
        if chat_type != "private":
            response += f"\nüë§ @{username}" if user.username else f"\nüë§ {user.full_name}"

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–∫–∞—Ç–∏—Ç—å"
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –û—Ç–∫–∞—Ç–∏—Ç—å", callback_data=f"cancel_{transaction_id}")]
        ])

        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å –∫–Ω–æ–ø–∫–æ–π, –ø—Ä–∏ –æ—à–∏–±–∫–µ - –±–µ–∑ –∫–Ω–æ–ø–∫–∏
        try:
            await update.message.reply_text(response, reply_markup=keyboard)
        except (TimedOut, NetworkError) as e:
            logger.warning(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–Ω–æ–ø–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –∫–Ω–æ–ø–∫–∏: {e}")
            await update.message.reply_text(
                response + "\n\n‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                reply_markup=get_main_keyboard()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–Ω–æ–ø–∫–∏: {e}")
            await update.message.reply_text(
                response,
                reply_markup=get_main_keyboard()
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({username}): {e}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏.",
            reply_markup=get_main_keyboard()
        )