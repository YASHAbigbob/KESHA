# balance.py - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes
from utils.logger import logger
from crud import get_user_accounts, get_account_transactions, get_account_balance, ensure_chat_exists, get_account
import os


def get_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = [
        [KeyboardButton("/help"), KeyboardButton("/—Å—á–µ—Ç–∞")],
        [KeyboardButton("/—Å–≤–µ—Ä—å"), KeyboardButton("/–¥–∞–π")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def show_balance_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /–¥–∞–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    user = update.effective_user
    user_id = user.id
    chat_id = update.effective_chat.id

    try:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –±–∞–ª–∞–Ω—Å")

        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
        if update.message.text:
            command_parts = update.message.text.split()
            if len(command_parts) > 1:
                specific_account_name = ' '.join(command_parts[1:]).strip().lower()
            else:
                specific_account_name = None
        else:
            specific_account_name = None

        # –ü–æ–ª—É—á–∞–µ–º —Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –í –≠–¢–û–ú –ß–ê–¢–ï
        accounts = get_user_accounts(user_id, chat_id)
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å—á–µ—Ç–æ–≤: {len(accounts)}")

        if not accounts:
            await update.message.reply_text(
                "üíº –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—á–µ—Ç–æ–≤.\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —Å—á–µ—Ç –∫–æ–º–∞–Ω–¥–æ–π `/–¥–æ–±–∞–≤—å —Ä—É–±`",
                reply_markup=get_main_keyboard()
            )
            return

        if specific_account_name:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –∏ –∏—Å—Ç–æ—Ä–∏—é –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å—á–µ—Ç—É
            target_account = None
            for account in accounts:
                # –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–û–ò–°–ö - –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏
                account_name_normalized = account['account_name'].lower().strip().replace(' ', '')
                specific_name_normalized = specific_account_name.lower().strip().replace(' ', '')

                if account_name_normalized == specific_name_normalized:
                    target_account = account
                    break

            if not target_account:
                await update.message.reply_text(
                    f"‚ùå –°—á–µ—Ç '{specific_account_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=get_main_keyboard()
                )
                return

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—á–µ—Ç–∞ –±–∞–ª–∞–Ω—Å–∞
            balance = get_account_balance(target_account['account_id'])
            transactions = get_account_transactions(target_account['account_id'])

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å —É—á–µ—Ç–æ–º —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç–∏
            precision = target_account.get('precision', 2)
            response = f"üí≥ –°—á–µ—Ç: {target_account['account_name']}\n"
            response += f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.{precision}f}\n\n"

            if transactions:
                response += "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n"
                for t in transactions[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ–ø–µ—Ä–∞—Ü–∏–π
                    try:
                        if t.get('amount') is not None:
                            amount = float(t['amount'])
                            amount_str = f"+{amount:.{precision}f}" if amount >= 0 else f"{amount:.{precision}f}"
                            date_str = t['date'][:16] if 'date' in t and t['date'] else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                            comment = t.get('comment', '') or ''
                            status = " ‚ùå" if t.get('is_reverted') else ""
                            response += f"‚Ä¢ {date_str} {amount_str} {comment}{status}\n"
                    except (ValueError, TypeError) as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
                        continue

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–ø–∏—Å–∫–∏
            keyboard_buttons = []

            # –ö–Ω–æ–ø–∫–∏ –≤—ã–ø–∏—Å–∫–∏ –≤ Excel
            keyboard_buttons.append([
                InlineKeyboardButton("üìä –í—ã–ø–∏—Å–∫–∞ (–≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏)",
                                     callback_data=f"export_all_{target_account['account_id']}"),
                InlineKeyboardButton("üìà –¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥",
                                     callback_data=f"export_current_{target_account['account_id']}")
            ])

            # –ö–Ω–æ–ø–∫–∏ –æ—Ç–∫–∞—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏)
            if transactions:
                for t in transactions[-3:]:  # –ö–Ω–æ–ø–∫–∏ –æ—Ç–∫–∞—Ç–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 3 –æ–ø–µ—Ä–∞—Ü–∏–π
                    try:
                        if (t.get('amount') is not None and
                            not t.get('is_reverted', 0) and
                            not t.get('is_archived', 0)):
                            amount = float(t['amount'])
                            amount_str = f"+{amount:.{precision}f}" if amount >= 0 else f"{amount:.{precision}f}"
                            keyboard_buttons.append([
                                InlineKeyboardButton(f"‚ùå –û—Ç–∫–∞—Ç–∏—Ç—å {amount_str}",
                                                     callback_data=f"cancel_{t['transaction_id']}")
                            ])
                    except (ValueError, TypeError) as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫–∞—Ç–∞: {e}")
                        continue

            reply_markup = InlineKeyboardMarkup(keyboard_buttons) if keyboard_buttons else None

            await update.message.reply_text(response, reply_markup=reply_markup)

        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ –≤—Å–µ–º —Å—á–µ—Ç–∞–º
            response = "üíº –í–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞:\n\n"
            total_balance = 0.0

            for account in accounts:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—á–µ—Ç–∞ –±–∞–ª–∞–Ω—Å–∞
                balance = get_account_balance(account['account_id'])
                total_balance += balance

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å —Å —É—á–µ—Ç–æ–º —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç–∏
                precision = account.get('precision', 2)
                balance_str = f"{balance:.{precision}f}"
                response += f"üí∞ {account['account_name']}: {balance_str}\n"

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å—é
            max_precision = max(acc.get('precision', 2) for acc in accounts)
            response += f"\nüíµ –ò—Ç–æ–≥–æ: {total_balance:.{max_precision}f}"

            # –î–í–ï –ö–ù–û–ü–ö–ò –≤—ã–ø–∏—Å–∫–∏ –ø–æ –≤—Å–µ–º —Å—á–µ—Ç–∞–º
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üìä –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", callback_data="export_all_accounts"),
                    InlineKeyboardButton("üìà –¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥", callback_data="export_current_accounts")
                ]
            ])

            await update.message.reply_text(response, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )