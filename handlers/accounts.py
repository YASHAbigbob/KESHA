# accounts.py - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° USERNAME
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes
from utils.logger import logger
from crud import create_account, get_user_accounts, delete_account, create_user, ensure_chat_exists

def get_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = [
        [KeyboardButton("/help"), KeyboardButton("/—Å—á–µ—Ç–∞")],
        [KeyboardButton("/—Å–≤–µ—Ä—å"), KeyboardButton("/–¥–∞–π")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


async def add_account_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /–¥–æ–±–∞–≤—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π username"""
    user = update.effective_user
    user_id = user.id
    chat_id = update.effective_chat.id
    chat_type = update.effective_chat.type
    username = user.username or user.full_name  # –ü–æ–ª—É—á–∞–µ–º username

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —á–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    ensure_chat_exists(chat_id, chat_type, update.effective_chat.title)

    # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    if update.message.text:
        command_parts = update.message.text.split()
        if len(command_parts) > 1:
            account_name = command_parts[1].strip()
            precision = 2  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

            if len(command_parts) > 2:
                try:
                    prec_value = int(command_parts[2])
                    if 2 <= prec_value <= 8:
                        precision = prec_value
                    else:
                        await update.message.reply_text(
                            "‚ùå –†–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 2 –¥–æ 8. –ò—Å–ø–æ–ª—å–∑—É—é –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 2",
                            reply_markup=get_main_keyboard()
                        )
                except ValueError:
                    pass
        else:
            account_name = None
    else:
        account_name = None

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}) –≤ —á–∞—Ç–µ {chat_id} —Å–æ–∑–¥–∞–µ—Ç —Å—á–µ—Ç: '{account_name}'")

    if not account_name:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "‚Ä¢ `/–¥–æ–±–∞–≤—å —Ä—É–±` - —Å—á–µ—Ç —Å —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å—é 2\n"
            "‚Ä¢ `/–¥–æ–±–∞–≤—å –∫–∞—Ä—Ç–∞ 4` - —Å—á–µ—Ç —Å —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å—é 4",
            reply_markup=get_main_keyboard()
        )
        return

    if len(account_name) > 100:
        await update.message.reply_text(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤).",
            reply_markup=get_main_keyboard()
        )
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—á–µ—Ç–∞ –≤ —á–∞—Ç–µ
        existing_accounts = get_user_accounts(user_id, chat_id)

        for account in existing_accounts:
            if account['account_name'].lower() == account_name.lower():
                await update.message.reply_text(
                    f"‚ùå –°—á–µ—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{account_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ.",
                    reply_markup=get_main_keyboard()
                )
                return

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        create_user(user_id, username)

        # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å—é –ò USERNAME
        account_id = create_account(chat_id, account_name, user_id, username, precision)

        logger.info(f"–°–æ–∑–¥–∞–Ω —Å—á–µ—Ç '{account_name}' (ID: {account_id}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {username} –≤ —á–∞—Ç–µ {chat_id}")

        precision_info = f" —Å —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å—é {precision}" if precision != 2 else ""
        chat_info = " –≤ –≥—Ä—É–ø–ø–µ" if chat_type != "private" else ""

        await update.message.reply_text(
            f"‚úÖ –°—á—ë—Ç '{account_name}' –¥–æ–±–∞–≤–ª–µ–Ω{precision_info}{chat_info}.",
            reply_markup=get_main_keyboard()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_keyboard()
        )


async def delete_account_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /—É–¥–∞–ª–∏"""
    user = update.effective_user
    user_id = user.id
    chat_id = update.effective_chat.id
    chat_type = update.effective_chat.type
    username = user.username or user.full_name

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —á–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    ensure_chat_exists(chat_id, chat_type, update.effective_chat.title)

    if update.message.text:
        command_parts = update.message.text.split()
        if len(command_parts) > 1:
            account_name = ' '.join(command_parts[1:]).strip()
        else:
            account_name = None
    else:
        account_name = None

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}) —É–¥–∞–ª—è–µ—Ç —Å—á–µ—Ç '{account_name}' –≤ —á–∞—Ç–µ {chat_id}")

    if not account_name:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
            reply_markup=get_main_keyboard()
        )
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ
        existing_accounts = get_user_accounts(user_id, chat_id)

        account_to_delete = None
        for account in existing_accounts:
            if account['account_name'].lower() == account_name.lower():
                # –í –≥—Ä—É–ø–ø–∞—Ö –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–¥–∞–ª—è—Ç—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å
                if chat_type != "private" and account.get('created_by') != user_id:
                    await update.message.reply_text(
                        f"‚ùå –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤–∞–º–∏ —Å—á–µ—Ç–∞.",
                        reply_markup=get_main_keyboard()
                    )
                    return
                account_to_delete = account
                break

        if not account_to_delete:
            await update.message.reply_text(
                f"‚ùå –°—á–µ—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{account_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_main_keyboard()
            )
            return

        delete_account(account_to_delete['account_id'])
        logger.info(f"–£–¥–∞–ª–µ–Ω —Å—á–µ—Ç '{account_name}' (ID: {account_to_delete['account_id']}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {username}")

        await update.message.reply_text(
            f"‚úÖ –°—á—ë—Ç '{account_name}' —É–¥–∞–ª–µ–Ω.",
            reply_markup=get_main_keyboard()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—á–µ—Ç–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—á–µ—Ç–∞.",
            reply_markup=get_main_keyboard()
        )


async def list_accounts_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /—Å—á–µ—Ç–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º username —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π"""
    user = update.effective_user
    user_id = user.id
    chat_id = update.effective_chat.id
    chat_type = update.effective_chat.type

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —á–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    ensure_chat_exists(chat_id, chat_type, update.effective_chat.title)

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—á–µ—Ç–∞ –≤ —á–∞—Ç–µ {chat_id}")

    try:
        # –£–º–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤
        accounts = get_user_accounts(user_id, chat_id)

        if not accounts:
            await update.message.reply_text(
                "üíº –í —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å—á–µ—Ç–æ–≤.\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —Å—á–µ—Ç –∫–æ–º–∞–Ω–¥–æ–π:\n"
                "‚Ä¢ `/–¥–æ–±–∞–≤—å —Ä—É–±` - –¥–ª—è —Ä—É–±–ª–µ–π\n"
                "‚Ä¢ `/–¥–æ–±–∞–≤—å –∫–∞—Ä—Ç–∞` - –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã",
                reply_markup=get_main_keyboard()
            )
            return

        accounts_list = []
        for i, account in enumerate(accounts, 1):
            precision_info = f" (—Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å: {account['precision']})" if account.get('precision', 2) != 2 else ""
            creator_info = ""

            # –í –≥—Ä—É–ø–ø–∞—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è —Å—á–µ—Ç–∞ (username)
            if chat_type != "private" and account.get('username'):
                creator_info = f" üë§ @{account['username']}"
            elif chat_type != "private" and account.get('created_by'):
                creator_info = f" üë§ user_{account['created_by']}"

            accounts_list.append(f"{i}. {account['account_name']}{precision_info}{creator_info}")

        header = "üíº –°—á–µ—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ:\n\n" if chat_type != "private" else "üíº –í–∞—à–∏ —Å—á–µ—Ç–∞:\n\n"

        await update.message.reply_text(
            header + "\n".join(accounts_list) +
            "\n\nüí° –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n`/<–∏–º—è_—Å—á–µ—Ç–∞> <—Å—É–º–º–∞> <–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π>`",
            reply_markup=get_main_keyboard()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—á–µ—Ç–æ–≤: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—á–µ—Ç–æ–≤.",
            reply_markup=get_main_keyboard()
        )